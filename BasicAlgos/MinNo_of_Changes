Bob likes to eat. There are n piles of food aligned in a straight line in front of him. The i-th pile contains a_i units of food.

Bob will walk from the 1-st pile towards the n-th pile, and he wants to eat every pile of food without walking back. When Bob reaches the i-th pile, he can eat that pile if and only if |v−ai|≤x, where x is a fixed integer, and v is Bob's food affinity.

Before Bob starts to walk, he can set v to any integer. Also, for each i(1≤i≤n), Luke can change his food affinity to any integer before he eats the i-th pile.
Find the minimum number of changes needed to eat every pile of food.
Note that the initial choice for v is not considered as a change.

Input Format

The input consists of multiple test cases. The first line contains a single integer t the number of test cases. The description of test cases follows.
For each test case, the first line contains two integers, n,x — the number of piles, and the maximum difference between the size of a pile and Luke's food affinity, such that Luke can eat the pile.
The second line contains n integers a1,a2,…,an.

Constraints

(1≤ t≤ 10^4)
(1≤n≤2⋅10^5, 1≤x≤10^9)
(1≤ai≤109)
It is guaranteed that the sum of n over all test cases does not exceed 2⋅10^5

Output Format

For each test case, output an integer on a separate line, which is the minimum number of changes needed.

Sample Input 0

7
5 3
3 8 5 6 7
5 3
3 10 9 8 7
12 8
25 3 3 17 8 6 1 16 15 25 17 23
10 2
1 2 3 4 5 6 7 8 9 10
8 2
2 4 6 8 6 4 12 14
8 2
2 7 8 9 6 13 21 28
15 5
11 4 13 23 7 10 5 21 20 11 17 5 29 16 11

Sample Output 0

0
1
2
1
2
4
6

#include <iostream>
#include <vector>
using namespace std;

void solve() {
    int n, x;
    cin >> n >> x;  
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    int L = a[0] - x, R = a[0] + x;
    int changes = 0;

    for (int i = 1; i < n; i++) {
        int newL = max(L, a[i] - x);
        int newR = min(R, a[i] + x);

        if (newL > newR) { 
            changes++;
            L = a[i] - x;
            R = a[i] + x;
        } else {
            L = newL;
            R = newR;
        }
    }
    cout << changes << endl;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
