Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

class Solution {
public:
// Memoization
    int solve(vector<vector<int>> &dp, string &t1, string &t2, int i, int j) {
        if(i<0 || j<0) return 0;
        if(dp[i][j]!= -1) return dp[i][j];

        if(t1[i]==t2[j]) return dp[i][j] = 1 + solve(dp, t1, t2, i-1, j-1);
        return dp[i][j] = max(solve(dp, t1, t2, i-1, j), solve(dp, t1, t2, i, j-1));
    }

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return solve(dp, text1, text2, n-1, m-1);
    }
};
